#! usr/bin/env python
# -*- coding: utf-8 -*-
"""This module makes all work with logining"""
import hashlib
import logging
import string
import random
import uuid

from time import time


logger = logging.getLogger(__name__)


class PasswordMaster(object):
    """This class provide all work with passwords hashing and checking"""

    SALT_NAME = 'mrsalt'

    def generate_salt(self, length=10):
        """Generate salt of given length.

        This method generate salt using SHA512 encryption.

        Arguments:
        length - salt length (default 10)

        Author: Olexii
        """
        logger.debug("generating salf, length %s", length)
        return "".join(
            random.SystemRandom().choice(
                string.ascii_uppercase + string.digits) for _ in range(length))

    def hash_password(self, password, salt=None):
        """Return hashed password with sha512 and salt.

        Arguments:
        password - password need to be hashed
        salt - salt added to hash (default generated by this class)

        Author: Olexii
        """
        logger.debug("hash password called, salt: %s", salt)

        sha512 = hashlib.sha512()
        if not salt:
            salt = self.generate_salt()

        sha512.update("".join([
            salt.encode('utf8'),
            self.SALT_NAME.encode('utf8'),
            password.encode('utf8')
        ]))
        return "".join([salt, self.SALT_NAME, sha512.hexdigest()])

    def check_password(self, password_to_check, hashed_password):
        """This method check if given password is same as hashed password

        This method hash raw password using hashed_password salt
        and check it for equality.

        Arguments:
        password_to_check - raw password we need to check
        hashed_password - hashed password to compare with

        Author: Olexii
        """
        logger.debug("check password called")

        salt = hashed_password.split(self.SALT_NAME)[0]
        return self.hash_password(password_to_check, salt) == hashed_password

    def generate_token(self, length=100):
        """Generate unique token based on time, uuid and random

        This method is too hard to understand, but it create
        unique token using current time, random uuid and
        salt generation.

        Arguments:
        length - token length (default 100)

        Author: Olexii
        """
        logger.debug("generating token, length: %s", length)

        timeshot = str(int(time()))
        uuid_token = uuid.uuid4().hex
        token_body = self.generate_salt(
            length - len(uuid_token) - len(timeshot))

        return "".join([
            uuid_token,
            token_body,
            timeshot
        ])
